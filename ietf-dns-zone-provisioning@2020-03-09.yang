module ietf-dns-zone-provisioning {

  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-dns-zone-provisioning";

  prefix dnszp;

  import ietf-inet-types {
    prefix inet;
  }

  organization
    "IETF Domain Name System Operations Working Group (dnsop)";

  contact
    "WG Web:   <https://datatracker.ietf.org/wg/dnsop/>
     WG List:  <mailto:dnsop@ietf.org>

     Editor:   Willem Toorop
               <mailto:willem@nlnetlabs.nl>";

  description
    "This YANG module defines a model for configuring DNS Zone
     provisioning on authoritative nameservers.
     
     Copyright (c) 2020 IETF Trust and the persons identified as
     authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Simplified BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC ????; see the
     RFC itself for full legal notices.";

  revision 2020-03-09 {
    description
      "Initial revision.";
    reference
      "RFC XXXX: A YANG Data Model for DNS Zone provisioning configuration";
  }

  /* Groupings */

  grouping tsig-key {
    leaf name {
      type inet:domain-name;
      mandatory true;
      description
        "The name of the key";
    }
    leaf algorithm {
      type inet:domain-name;
      mandatory true;
      description
        "Name of the algorithm";
      reference
        "<https://www.iana.org/assignments/tsig-algorithm-names/tsig-algorithm-names.xhtml>";
    }
    leaf secret {
      type string;
      mandatory true;
      description
        "Shared secret in base64 format. Possible lengths are dependend
         on the algorithm";
    }
    description
      "Shared key used for authenticating transactions with
       authoritative name servers";
    reference
      "RFC2845: Secret Key Transaction Authentication for DNS (TSIG)";
  }
  grouping acl-net-key {
    leaf subnet {
      type inet:ip-prefix;
      description
        "Contacting IP address must match this prefix.";
    }
    leaf tsig-key {
      type leafref {
        path "/tsig-keys/tsig-key/name";
      }
      description
        "Contacting party must use this tsig-key.";
    }
    description
      "Access control allowing the action from IP addresses from the
       given subnet and tsig-key if present. Without tsig-key only
       the subnet needs to match. The subnet should be 0.0.0.0/0 or 
       ::/0 to allow access from all IPv4 or all IPv6 addresses";
  }

  grouping addr-key {
    leaf ip {
      type inet:ip-address;
    }
    leaf port {
      type inet:port-number;
      default 53;
    }
    leaf tsig-key {
      type leafref {
        path "/tsig-keys/tsig-key/name";
      }
    }
  }

  container tsig-keys {
    list tsig-key {
      key "name";
      uses tsig-key;
    }
  }

  container zones {
    list zone {
      key "name";
      leaf name {
        type inet:domain-name;
      }
      list allow-notify {
        key "subnet";
        uses acl-net-key;
      }
      list allow-transfer {
        key "subnet";
        uses acl-net-key;
      }
      list notify-to {
        key "ip";
        uses "addr-key";
      }
      list transfer-from {
        key "ip";
        uses "addr-key";
      }
    }
  }
}
